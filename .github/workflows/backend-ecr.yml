name: Build and Push Backend to ECR

on:
  push:
    branches: ["integrate/dev"]
    paths:
      - "apps/backend/**"
      - "packages/**"
      - "package*.json"
      - "turbo.json"
      - ".github/workflows/backend-ecr.yml"
  workflow_dispatch:

concurrency:
  group: backend-ecr-${{ github.ref }}
  cancel-in-progress: true

env:
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
      image_sha: ${{ steps.image-sha.outputs.value }}
      image_latest: ${{ steps.image-latest.outputs.value }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (Access Keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS configuration
        run: |
          test -n "$AWS_REGION" || { echo "AWS_REGION repo variable is required"; exit 1; }
          test -n "$ECR_REPOSITORY" || { echo "ECR_REPOSITORY repo variable is required"; exit 1; }

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$ECR_REPOSITORY" \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256 >/dev/null

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,format=short

      - name: Build and push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false

      - name: Set image (SHA) output
        id: image-sha
        env:
          IMAGE_URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        run: |
          echo "value=${IMAGE_URI}" >> $GITHUB_OUTPUT

      - name: Set image (latest) output
        id: image-latest
        env:
          IMAGE_URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
        run: |
          echo "value=${IMAGE_URI}" >> $GITHUB_OUTPUT

  deploy-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/integrate/dev' }}
    steps:
      - name: Prepare variables
        id: prep
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then \
            echo "IMAGE_URI=${{ needs.build-and-push.outputs.image_latest }}" >> $GITHUB_ENV; \
          else \
            echo "IMAGE_URI=${{ needs.build-and-push.outputs.image_sha }}" >> $GITHUB_ENV; \
          fi
          echo "ECR_REGISTRY=${{ needs.build-and-push.outputs.registry }}" >> $GITHUB_ENV
      - name: SSH and deploy on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            # Set default port if not provided
            PORT=${{ secrets.EC2_PORT }}
            if [ -z "$PORT" ]; then
              PORT=22
            fi
            echo "Using port: $PORT"
            # Install AWS CLI if not already installed
            if ! command -v aws &> /dev/null; then
              echo "AWS CLI not found, installing..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
            fi
            # Install Docker if not already installed
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              sudo apt-get update
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
              sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
              sudo usermod -aG docker $USER
            fi
            # Now proceed with deployment
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
            docker pull ${IMAGE_URI}
            docker rm -f backend || true
            docker run -d --name backend -p 3001:3001 --restart unless-stopped \
              --env-file /opt/backend/.env \
              ${IMAGE_URI}
