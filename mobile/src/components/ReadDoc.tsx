import { View } from 'react-native';
import React from 'react';
import Markdown from 'react-native-markdown-display';
import MathJax from 'react-native-mathjax';

const ReadingDoc = () => {
  // Function to parse content and separate markdown from math
  const parseContent = (content: string) => {
    // Split content by math blocks (display math)
    const mathBlockRegex = /(\$[\s\S]*?\$|\\[[\s\S]*?\\])/g; 
    const inlineMathRegex = /(\$[\s\S]*?\$|\(\([\s\S]*?\)[\s\S]*?\))/g; 
    const parts = content.split(mathBlockRegex).concat(content.split(inlineMathRegex));

    return parts.map((part, index) => {
      if (part.match(mathBlockRegex)) {
        // This is a math block
        return { type: 'math', content: part, key: `math-${index}` };
      } else {
        // This is regular content that might contain markdown
        return { type: 'text', content: part, key: `text-${index}` };
      }
    });
  };

  // Convert LaTeX formatting to Markdown
  const convertLatexToMarkdown = (latexContent: string) => {
    let markdownContent = latexContent;

    // Convert LaTeX sections to Markdown headers
    markdownContent = markdownContent.replace(
      /\\section\*\{([^}]+)\}/g,
      '## $1',
    );
    markdownContent = markdownContent.replace(/\\section\{([^}]+)\}/g, '## $1');

    // Convert LaTeX text formatting
    markdownContent = markdownContent.replace(/\\textbf\{([^}]+)\}/g, '**$1**');
    markdownContent = markdownContent.replace(/\\text\{([^}]+)\}/g, '$1');

    markdownContent = markdownContent.replace(/\\emph\{([^}]+)\}/g, '*$1*');
    markdownContent = markdownContent.replace(/\\textit\{([^}]+)\}/g, '*$1*');

    // Convert LaTeX itemize to Markdown list
    markdownContent = markdownContent.replace(/\\begin\{itemize\}/g, '');
    markdownContent = markdownContent.replace(/\\end\{itemize\}/g, '');
    markdownContent = markdownContent.replace(/\\item\s+/g, '- ');

    // Convert LaTeX enumerate to Markdown ordered list
    markdownContent = markdownContent.replace(/\\begin\{enumerate\}/g, '');
    markdownContent = markdownContent.replace(/\\end\{enumerate\}/g, '');
    markdownContent = markdownContent.replace(/\\item\s+/g, '1. ');

    // Convert LaTeX spacing commands
    markdownContent = markdownContent.replace(/\\vspace\{[^}]+\}/g, '\n\n');
    markdownContent = markdownContent.replace(/\\\\(?:\[[^\]]*\])?/g, '\n');

    // Convert LaTeX text commands
    markdownContent = markdownContent.replace(/\\text\{([^}]+)\}/g, '$1');
    markdownContent = markdownContent.replace(/\\quad/g, '    ');

    // Clean up extra whitespace
    markdownContent = markdownContent.replace(/\n\s*\n\s*\n/g, '\n\n');

    return markdownContent;
  };

  const content = `
  "An EMF is generated by an AC generator having a 100-turn coil of loop area $ 1\, \text{m}^2 $.  \nThe coil rotates at a speed of one revolution per second and is placed in a uniform magnetic field of $ 0.05\\, \\text{T} $ perpendicular to the axis of rotation of the coil.  \nThe maximum value of EMF is:\n"




`;

  const contentParts = parseContent(content);

  return (
    <View >
      {contentParts.map((part) => {
        if (part.type === 'math') {
          return (
            <MathJax
              key={part.key}
              html={part.content}
              mathJaxOptions={{
                messageStyle: 'none',
                extensions: ['tex2jax.js'],
                jax: ['input/TeX', 'output/HTML-CSS'],
                tex2jax: {
                  inlineMath: [
                    ['$', '$'],
                    ['\\(', '\\)'],
                  ],
                  displayMath: [
                    ['$$', '$$'],
                    ['\\[', '\\]'],
                  ],
                  processEscapes: true,
                },
                TeX: {
                  extensions: [
                    'AMSmath.js',
                    'AMSsymbols.js',
                    'noErrors.js',
                    'noUndefined.js',
                  ],
                },
              }}
            />
          );
        } else {
          const markdownContent = convertLatexToMarkdown(part.content);
          return <Markdown key={part.key}>{markdownContent}</Markdown>;
        }
      })}
    </View>
  );
};

export default ReadingDoc;